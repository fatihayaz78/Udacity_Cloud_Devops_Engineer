Parameters:

  EnvironmentName:
    Description: The Name of the Environment or Project
    Type: String
    Default: UDAGRAM

  ImageId:
    Description: ID of machine amazon (AMI)
    Type: String

  InstanceType:
    Description: Type of EC2 instance
    Type: String

  VolumeSize:
    Description: Volume size of EC2 instance
    Type: String

Resources:
# SECURITY GROUPS

  LBSecurityGroup:  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming and outgoing traffic on port 80 for all IP ranges
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  WebServerSecurityGroup:  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming traffic on port 80 and allow outgoing on all ports
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        #- IpProtocol: tcp #Enable to allow RDP into instances from VPC located Bastion Instances
        #  FromPort: 3389
        #  ToPort: 3389
        #  CidrIp: 10.0.0.0/16
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  BastionHostSecurityGroup:  
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow incoming and outgoing traffic on tcp 3389 (RDP)
      VpcId: 
        Fn::ImportValue: !Sub ${EnvironmentName}-VPCID
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 0.0.0.0/0 #change to public ISP-IP for enhanced security
      SecurityGroupEgress: #Allow outgoing RDP to other instances in VPC
        - IpProtocol: tcp
          FromPort: 3389
          ToPort: 3389
          CidrIp: 10.0.0.0/16
      
# IAM ROLE AND INSTANCE PROFILE 

  UdacityS3ReadOnlyEC2:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
              - ec2.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Path: /
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action: 
                - "s3:Get*" 
                - "s3:List*"
                Resource: arn:aws:s3:::udacityprojectreffatg  # '*' for all resources
      RoleName: UdacityS3ReadOnlyEC2
        

  ProfileWithRolesForOurApp:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
        - !Ref UdacityS3ReadOnlyEC2

# AUTO SCALING
  WebAppLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      #AssociatePublicIpAddress: true
      UserData:
        Fn::Base64: !Sub |
          <script>
          powershell -command "(Install-WindowsFeature -name Web-Server -IncludeManagementTools)"
          powershell -command "(Import-Module AWSPowerShell)"
          powershell -command "(Copy-S3Object -BucketName udacityprojectreffatg -Key index.htm -LocalFile C:\inetpub\wwwroot\index.htm)"
          </script>          
      ImageId: !Ref ImageId
      SecurityGroups:
        - Ref: WebServerSecurityGroup
      IamInstanceProfile: 
        Ref: ProfileWithRolesForOurApp
      InstanceType: !Ref InstanceType
      #KeyName: UDAGRAM-Key-Pair # Activate for testing, disable for production
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref VolumeSize

  WebAppGroup:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue:
            !Sub "${EnvironmentName}-PrivateSubnets" # CHANGE TO Public if testing is required
      LaunchConfigurationName: 
        Ref: WebAppLaunchConfig
      MinSize: '4'
      MaxSize: '6'
      TargetGroupARNs:
      - Ref: WebAppTargetGroup    

#LOAD BALANCING

  WebAppLB:
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet1" # Subnets where the LB cluster is located
        - Fn::ImportValue: !Sub "${EnvironmentName}-PublicSubnet2" # Subnets where the LB cluster is located
      SecurityGroups:
        - Ref: LBSecurityGroup

  Listener:
    Type: "AWS::ElasticLoadBalancingV2::Listener"
    Properties:
      DefaultActions: #required
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn: #required
        Ref: WebAppLB
      Port: '80' #required
      Protocol: HTTP #required

  ALBListenerRule:
    Type: "AWS::ElasticLoadBalancingV2::ListenerRule"
    Properties:
      Actions: #required
        - Type: forward
          TargetGroupArn: !Ref 'WebAppTargetGroup'
      Conditions: #required
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref 'Listener' #required
      Priority: 1 #required

  WebAppTargetGroup:
    Type: "AWS::ElasticLoadBalancingV2::TargetGroup"
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId:
        Fn::ImportValue:
          Fn::Sub: "${EnvironmentName}-VPCID"

# BASTION HOST
# Use NetworkInterface property of EC2 instance to assign a public IP to machine

  BastionHost1: 
    Type: AWS::EC2::Instance
    Properties:
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref ProfileWithRolesForOurApp
      InstanceType: !Ref InstanceType
      KeyName: UDAGRAM-Key-Pair
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: !Ref VolumeSize 
      NetworkInterfaces: 
        - AssociatePublicIpAddress: "true"
          GroupSet: 
            - !Ref BastionHostSecurityGroup
          DeviceIndex: "0"
          SubnetId:
            Fn::ImportValue:
              Fn::Sub: "${EnvironmentName}-PublicSubnet1"

            
# OUTPUTS
Outputs:

  WebAppDNSName:
      Description: Web target group DNS Name (URL)
      Value: !Sub "http://${WebAppLB.DNSName}"
      Export: 
        Name: !Sub "${EnvironmentName}-DNSName"
